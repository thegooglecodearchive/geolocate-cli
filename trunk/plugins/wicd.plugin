# Plugin to use wicd to probe the wifi settings
# Copyright (C) 2010 Francis Markham
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version. This program is distributed in the 
# hope that it will be useful, but WITHOUT ANY WARRANTY; without 
# even the implied warranty of MERCHANTABILITY or FITNESS FOR 
# A PARTICULAR PURPOSE. See the GNU General Public License 
# for more details. You should have received a copy of the GNU General 
# Public License along with this program. If not, see <http://www.gnu.org/licenses/>. 

import dbus, plugins, sys, dbus.service
from plugins import Plugin, Detector, StandardNames

class NetworkManagerDetector(Plugin, Detector):
    #consts

    def needs_setup(): return False
    def setup(): pass
    @staticmethod
    def detection_capabilities(): 
        return [StandardNames.WIFI]
    @staticmethod
    def name():
        return "wicd"

    def __init__(self):
        self.__wicd = None
        self.__bus = None

    def can_run(self):
        try:
            #get list of all aps over dbus
            self.__bus = dbus.SystemBus()
            self.__wicd = self.__bus.get_object('org.wicd.daemon', '/org/wicd/daemon/wireless')
            return True
        except:
            return False

    def detect(self, type):
        if not self.__bus:
            self.__bus = dbus.SystemBus()
            self.__wicd = self.__bus.get_object('org.wicd.daemon', '/org/wicd/daemon/wireless')
        if type == StandardNames.WIFI:
            aps = []
            for network_id in range(0, self.__wicd.GetNumberOfNetworks()):

#                for key in ['essid','quality','strength','dbm_strength','bssid','mode','channel','encryption',
#                           'encryption_method','ip','netmask','gateway','use_global_dns',
#                            'automatic','enctype','dns1','dns2','dns3',
#                            ]:
#                    print "%s :\t%s" % (key, 
                
                aps.append({"ssid": str(self.__wicd.GetWirelessProperty(network_id, 'essid')), 
                            "mac":  str(self.__wicd.GetWirelessProperty(network_id, 'bssid')), 
                            "signal_strength": int(self.__wicd.GetWirelessProperty(network_id, 'quality'))})
            return aps
