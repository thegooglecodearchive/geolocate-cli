import dbus, plugins, sys, os
from plugins import Plugin, Detector

class NetworkManagerDetector(Plugin, Detector):
    #consts
    __NM_STATE_CONNECTED = 3
    __NM_DEVICE_TYPE_802_11_WIRELESS = 2
    __NM_DEVICE_STATE_ACTIVATED = 8

    def needs_setup(): False
    def setup(): pass
    @staticmethod
    def detection_capabilities(): 
        return [Detector.WIFI]
    @staticmethod
    def name():
        return "nm"

    def __init__(self):
        self.__nm = None
        self.__bus = None

    def can_run(self):
        try:
            #get list of all aps over dbus
            self.__bus = dbus.SystemBus()
            self.__nm = self.__bus.get_object('org.freedesktop.NetworkManager', '/org/freedesktop/NetworkManager')
            return True
        except:
            return False

    def detect(self, type):
        if not self.__bus:
            self.__bus = dbus.SystemBus()
            self.__nm = self.__bus.get_object('org.freedesktop.NetworkManager', '/org/freedesktop/NetworkManager')
        if type == Detector.WIFI:
            aps = []
            state = self.__nm.state()
#            if state != self.__NM_STATE_CONNECTED:
#                return None
            
            devices = self.__nm.GetDevices()
            for path in devices:
                device = self.__bus.get_object('org.freedesktop.NetworkManager', path)
                device_props = dbus.Interface(device, dbus_interface='org.freedesktop.DBus.Properties')
                props = device_props.GetAll("org.freedesktop.NetworkManager.Device")

                if props["DeviceType"] != self.__NM_DEVICE_TYPE_802_11_WIRELESS:
                    continue

#                if props["State"] != self.__NM_DEVICE_STATE_ACTIVATED:
                    # This device isn't active yet
#                    continue

                access_points = device.GetAccessPoints()
                
                for network_path in access_points:
                    if not network_path:
                    # No active network
                        continue
                    network = self.__bus.get_object('org.freedesktop.NetworkManager', network_path)
                    network_props = dbus.Interface(network, dbus_interface='org.freedesktop.DBus.Properties')
                    ssid = network_props.Get("org.freedesktop.NetworkManager.AccessPoint", "Ssid", byte_arrays=True)
                    mac = network_props.Get("org.freedesktop.NetworkManager.AccessPoint", "HwAddress")
                    sig_str = network_props.Get("org.freedesktop.NetworkManager.AccessPoint", "Strength")
                    aps.append({"ssid": str(ssid), "mac": str(mac), "signal_strength": int(sig_str)})
            return aps
